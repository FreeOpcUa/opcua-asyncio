from pathlib import Path
from datetime import datetime
BASE_DIR = Path.cwd().parent


def status_codes():
    """
    Load values from StatusCode.csv and then
    add values from StatusCodes_add.csv, but only
    if they are absent from StatusCode.csv
    """
    with open(BASE_DIR / 'schemas' / 'StatusCodes_add.csv') as inputfile:
        additional = {}
        for line in inputfile:
            name, val, doc = line.split(",", 2)
            additional[int(val, 0)] = (name, val, doc)
    with open(BASE_DIR / 'schemas' / 'UA-Nodeset-master' / 'Schema' / 'StatusCode.csv') as inputfile:
        result = []
        for line in inputfile:
            name, val, doc = line.split(",", 2)
            result.append((name, val, doc))
            additional.pop(int(val, 0), None)
        add = [additional[k] for k in sorted(additional.keys())]
    return add + result


if __name__ == "__main__":
    codes = status_codes()
    with open(BASE_DIR / "asyncua" / "ua" / "status_codes.py", "w") as outputfile:
        outputfile.write(f"# AUTOGENERATED!!! Date: {datetime.utcnow()}\n"
                         "\n"
                         "from asyncua.ua.uaerrors import UaStatusCodeError\n"
                         "from enum import IntEnum\n"
                         "\n"
                         "\n")

        # Build Enums
        outputfile.write("class StatusCodes(IntEnum):\n")
        for name, val, doc in codes:
            doc = doc.strip()
            outputfile.write(f"    {name} = {val}\n")
        outputfile.write(f"\n")
        outputfile.write(f"    @property\n")
        outputfile.write(f"    def doc(self):\n")
        outputfile.write(f"        return code_to_doc[self.value]\n")
        outputfile.write(f"\n")
        outputfile.write(f"    @property\n")
        outputfile.write(f"    def is_good(self):\n")
        outputfile.write(f"        # apply mask and compare result\n")
        outputfile.write(f"        return not {3 << 30} & self.value\n")
        outputfile.write(f"\n\n")

        # Build doc dictionary
        outputfile.write("code_to_doc = {\n")
        for name, val, doc in codes:
            outputfile.write(f"    {val}: {doc.strip()},\n")
        outputfile.write("}\n\n\n")

        # Add function to generate name and doc from code
        outputfile.write("""def get_name_and_doc(code):
        if not isinstance(code, StatusCodes):
            try:
                code = StatusCodes(code)
            except ValueError:
                if code & 1 << 31:
                    return 'Bad', f'Unknown StatusCode value: {code}'
                elif code & 1 << 30:
                    return 'UncertainIn', f'Unknown StatusCode value: {code}'
                else:
                    return 'Good', f'Unknown StatusCode value: {code}'

        return code.name, code.doc""")
